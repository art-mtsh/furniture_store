# name: EC2 Python APP

on:
  push:
    branches: [ "main" ]
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install build-essential and python3.10-dev
        run: |
          sudo apt-get install build-essential python3.10-dev -y

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 --exclude=venv/ --count --select=E9,F63,F7,F82 --show-source --statistics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 --exclude=venv/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        shell: bash

      # - name: Test with pytest
      #   run: |
      #     cd backend
      #     DJANGO_SETTINGS_MODULE=backend.settings pytest
      #   shell: bash


  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: artmtsh/store_backend:latest

  deploy:
    runs-on: self-hosted
    needs: docker
    steps:

#      - name: Copy SSL Certificate to Build Context
#        run: cp /dev_ssl.crt $GITHUB_WORKSPACE/dev_ssl.crt

      - name: Stop and remove containers and images (if any)
        run: |
          docker stop $(docker ps -a -q) || true
          docker remove $(docker ps -a -q) || true
          docker rmi -f $(docker images -aq) || true
        continue-on-error: true

      - name: Pull latest image from Docker Hub
        run: docker pull artmtsh/store_backend:latest

      - name: Run new container
        run: docker run -d -p 443:443 --name store_backend_container artmtsh/store_backend:latest
